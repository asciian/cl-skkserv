(in-package :cl)
(defpackage :lime/skk/text
  (:use :cl :cl-ppcre :alexandria)
  (:import-from :lime/core/dictionary dictionary convert)
  (:import-from :lime/skk/lisp lispp)
  (:import-from :lime/skk/numeric numericp)
  (:import-from :lime/skk/util make-table)
  (:export skk-text-dictionary))
(in-package :lime/skk/text)

(defclass skk-text-dictionary (dictionary)
  ((pathname :initarg :pathname :reader skk-text-dictionary-pathname)
   (table :initarg :table :accessor skk-text-dictionary-table)))

(defmethod initialize-instance :after ((dict skk-text-dictionary) &rest initargs)
  (declare (ignore initargs))
  (setf (skk-text-dictionary-table dict) (make-table (skk-text-dictionary-pathname dict)))
  (maphash (lambda (key value)
             (setf (gethash key (skk-text-dictionary-table dict))
                   (remove-if (conjoin #'numericp #'lispp) value))
             (unless (gethash key (skk-text-dictionary-table dict))
               (remhash key (skk-text-dictionary-table dict))))
           (skk-text-dictionary-table dict)))

(defmethod convert append ((d skk-text-dictionary) (s string))
  (gethash s (skk-text-dictionary-table d)))

(defmethod complete append ((d skk-text-dictionary) (s string))
  (loop :for key :being :the :hash-keys :of (skk-text-dictionary-table d)
        :do (print (list (format nil "^~a" s) key))
        :when (scan (format nil "^~a" s) key) :collect key))
